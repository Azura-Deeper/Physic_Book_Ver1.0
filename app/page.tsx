'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { useAuth } from '@/contexts/AuthContext'
import AuthModal from '@/components/AuthModal'
import UserMenu from '@/components/UserMenu'

export default function Home() {
  const [mounted, setMounted] = useState(false)
  const [theme, setTheme] = useState('light')
  const [showAuthModal, setShowAuthModal] = useState(false)
  const router = useRouter()
  const { user, loading } = useAuth()

  useEffect(() => {
    setMounted(true)
    // Load saved theme
    const savedTheme = localStorage.getItem('physics-book-theme') || 'light'
    setTheme(savedTheme)
    document.documentElement.className = savedTheme
  }, [])

  const toggleTheme = () => {
    const newTheme = theme === 'light' ? 'dark' : theme === 'dark' ? 'sepia' : 'light'
    setTheme(newTheme)
    document.documentElement.className = newTheme
    localStorage.setItem('physics-book-theme', newTheme)
  }

  const handleStartLearning = () => {
    if (user) {
      router.push('/lessons')
    } else {
      setShowAuthModal(true)
    }
  }

  const handleAuthSuccess = () => {
    router.push('/lessons')
  }

  if (!mounted) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900">
      {/* Header v·ªõi theme toggle */}
      <header className="fixed top-0 w-full bg-white/80 dark:bg-gray-800/80 backdrop-blur-md border-b border-gray-200 dark:border-gray-700 z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center space-x-3">
              <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
                <span className="text-white font-bold text-sm">P</span>
              </div>
              <h1 className="text-xl font-bold text-gray-900 dark:text-white">
                Physics Book
              </h1>
            </div>
            <div className="flex items-center space-x-2">
              {user && (
                <UserMenu user={user} />
              )}
              <button
                onClick={toggleTheme}
                className="p-2 rounded-lg bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
              >
                {theme === 'light' ? 'üåô' : theme === 'dark' ? '‚òÄÔ∏è' : 'üåÖ'}
              </button>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="pt-16">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-20">
          {/* Hero Section */}
          <div className="text-center mb-16">
            <div className="inline-flex items-center px-4 py-2 bg-blue-100 dark:bg-blue-900/30 rounded-full text-blue-800 dark:text-blue-200 text-sm font-medium mb-8">
              <span className="w-2 h-2 bg-blue-500 rounded-full mr-2"></span>
              Ch∆∞∆°ng 1: V·∫≠t L√Ω 11
            </div>
            
            <h1 className="text-5xl md:text-6xl font-bold text-gray-900 dark:text-white mb-6">
              <span className="bg-gradient-to-r from-blue-600 via-purple-600 to-blue-800 bg-clip-text text-transparent">
                Dao ƒê·ªông
              </span>
            </h1>
            
            <p className="text-xl text-gray-600 dark:text-gray-300 mb-8 max-w-2xl mx-auto leading-relaxed">
              Kh√°m ph√° th·∫ø gi·ªõi dao ƒë·ªông t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao. T√¨m hi·ªÉu c√°c kh√°i ni·ªám, 
              c√¥ng th·ª©c v√† ·ª©ng d·ª•ng th·ª±c t·∫ø c·ªßa dao ƒë·ªông ƒëi·ªÅu h√≤a trong t·ª± nhi√™n.
            </p>
          </div>

          {/* Chapter Overview */}
          <div className="grid md:grid-cols-2 gap-8 mb-16">
            <div className="bg-white dark:bg-gray-800 rounded-2xl p-8 shadow-xl border border-gray-100 dark:border-gray-700">
              <div className="w-12 h-12 bg-gradient-to-r from-green-400 to-blue-500 rounded-xl flex items-center justify-center mb-6">
                <span className="text-white text-xl">üìö</span>
              </div>
              <h3 className="text-xl font-bold text-gray-900 dark:text-white mb-4">
                N·ªôi dung ch∆∞∆°ng
              </h3>
              <ul className="space-y-3 text-gray-600 dark:text-gray-300">
                <li className="flex items-center">
                  <span className="w-2 h-2 bg-blue-500 rounded-full mr-3"></span>
                  B√†i 1: M√¥ t·∫£ dao ƒë·ªông
                </li>
                <li className="flex items-center">
                  <span className="w-2 h-2 bg-blue-500 rounded-full mr-3"></span>
                  B√†i 2: Ph∆∞∆°ng tr√¨nh dao ƒë·ªông ƒëi·ªÅu ho√†
                </li>
                <li className="flex items-center">
                  <span className="w-2 h-2 bg-blue-500 rounded-full mr-3"></span>
                  B√†i 3: NƒÉng l∆∞·ª£ng trong dao ƒë·ªông ƒëi·ªÅu ho√†
                </li>
                <li className="flex items-center">
                  <span className="w-2 h-2 bg-blue-500 rounded-full mr-3"></span>
                  B√†i 4: Dao ƒë·ªông t·∫Øt d·∫ßn v√† hi·ªán t∆∞·ª£ng c·ªông h∆∞·ªüng
                </li>
              </ul>
            </div>

            <div className="bg-white dark:bg-gray-800 rounded-2xl p-8 shadow-xl border border-gray-100 dark:border-gray-700">
              <div className="w-12 h-12 bg-gradient-to-r from-purple-400 to-pink-500 rounded-xl flex items-center justify-center mb-6">
                <span className="text-white text-xl">üéØ</span>
              </div>
              <h3 className="text-xl font-bold text-gray-900 dark:text-white mb-4">
                M·ª•c ti√™u h·ªçc t·∫≠p
              </h3>
              <ul className="space-y-3 text-gray-600 dark:text-gray-300">
                <li className="flex items-start">
                  <span className="w-2 h-2 bg-purple-500 rounded-full mr-3 mt-2"></span>
                  <span>Hi·ªÉu ƒë∆∞·ª£c b·∫£n ch·∫•t v√† ƒë·∫∑c ƒëi·ªÉm c·ªßa dao ƒë·ªông</span>
                </li>
                <li className="flex items-start">
                  <span className="w-2 h-2 bg-purple-500 rounded-full mr-3 mt-2"></span>
                  <span>N·∫Øm v·ªØng ph∆∞∆°ng tr√¨nh dao ƒë·ªông ƒëi·ªÅu h√≤a</span>
                </li>
                <li className="flex items-start">
                  <span className="w-2 h-2 bg-purple-500 rounded-full mr-3 mt-2"></span>
                  <span>Ph√¢n t√≠ch nƒÉng l∆∞·ª£ng trong dao ƒë·ªông</span>
                </li>
                <li className="flex items-start">
                  <span className="w-2 h-2 bg-purple-500 rounded-full mr-3 mt-2"></span>
                  <span>·ª®ng d·ª•ng ki·∫øn th·ª©c v√†o th·ª±c t·∫ø</span>
                </li>
              </ul>
            </div>
          </div>

          {/* CTA Button */}
          <div className="text-center">
            <button
              onClick={handleStartLearning}
              className="inline-flex items-center px-8 py-4 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-bold rounded-2xl shadow-xl transform hover:scale-105 transition-all duration-200"
            >
              <span className="mr-3">üöÄ</span>
              B·∫Øt ƒë·∫ßu h·ªçc
              <svg className="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7l5 5m0 0l-5 5m5-5H6" />
              </svg>
            </button>
            
            <p className="mt-4 text-sm text-gray-500 dark:text-gray-400">
              Th·ªùi gian h·ªçc ∆∞·ªõc t√≠nh: 4-6 ti·∫øt h·ªçc
            </p>
          </div>
        </div>
      </main>

      {/* Auth Modal */}
      <AuthModal 
        isOpen={showAuthModal}
        onClose={() => setShowAuthModal(false)}
        onSuccess={handleAuthSuccess}
      />
    </div>
  )
}